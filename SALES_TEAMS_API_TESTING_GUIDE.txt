SALES TEAMS API - COMPLETE TESTING GUIDE
=========================================

BASE URL: /sales/teams
AUTHENTICATION: Bearer Token (JWT) required
DEPARTMENT: Sales department access required

=============================================================================
1. CREATE SALES TEAM
=============================================================================
Method: POST
Endpoint: /sales/teams
Roles: dep_manager, unit_head

Request Headers:
{
  "Authorization": "Bearer YOUR_JWT_TOKEN",
  "Content-Type": "application/json"
}

Request Body:
{
  "name": "Alpha Sales Team",
  "salesUnitId": 1,
  "teamLeadId": 123
}

Success Response (201):
{
  "success": true,
  "message": "Team \"Alpha Sales Team\" created successfully in sales unit \"North Region\"",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "salesUnit": {
      "id": 1,
      "name": "North Region"
    },
    "employeeCount": 1
  }
}

Error Response (409 - Conflict):
{
  "statusCode": 409,
  "message": "Team name \"Alpha Sales Team\" already exists in this sales unit",
  "error": "Conflict"
}

=============================================================================
2. GET ALL SALES TEAMS (Advanced Filtering)
=============================================================================
Method: GET
Endpoint: /sales/teams
Roles: dep_manager, unit_head, team_lead, senior, junior

Query Parameters (All Optional):
- teamId: number
- salesUnitId: number
- hasLead: boolean (true/false)
- hasMembers: boolean (true/false)
- hasLeads: boolean (true/false)
- teamName: string (partial match)
- leadEmail: string
- leadName: string (firstName or lastName)
- unitName: string (partial match)
- minMembers: number
- maxMembers: number
- minCompletedLeads: number
- maxCompletedLeads: number
- page: number (default: 1)
- limit: number (default: 10, max: 100)
- sortBy: string (name, createdAt, updatedAt, employeeCount, completedLeads)
- sortOrder: string (asc, desc)
- search: string (team name, lead name, or unit name)
- assigned: boolean (true/false)
- include: string (comma-separated: members,leads,unit,lead)

Example Request:
GET /sales/teams?hasLead=true&hasMembers=true&page=1&limit=10&sortBy=name&sortOrder=asc&include=lead,unit

Success Response (200):
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Alpha Sales Team",
      "teamLeadId": 123,
      "salesUnitId": 1,
      "employeeCount": 5,
      "completedLeads": 15,
      "createdAt": "2024-01-15T10:30:00Z",
      "updatedAt": "2024-01-15T10:30:00Z",
      "teamLead": {
        "id": 123,
        "firstName": "John",
        "lastName": "Doe",
        "email": "john@company.com",
        "phone": "+1 (555) 123-4567",
        "role": {
          "id": 3,
          "name": "team_lead"
        }
      },
      "salesUnit": {
        "id": 1,
        "name": "North Region",
        "email": "north@company.com",
        "phone": "+1 (555) 987-6543"
      },
      "membersCount": 4,
      "leadsCount": 25,
      "completedLeadsCount": 15,
      "actualEmployeeCount": 4
    }
  ],
  "total": 5,
  "pagination": {
    "page": 1,
    "limit": 10,
    "totalPages": 1,
    "hasNext": false,
    "hasPrev": false
  },
  "message": "Teams retrieved successfully"
}

Empty Response (200):
{
  "success": true,
  "data": [],
  "total": 0,
  "pagination": {
    "page": 1,
    "limit": 10,
    "totalPages": 0,
    "hasNext": false,
    "hasPrev": false
  },
  "message": "No teams found"
}

=============================================================================
3. GET TEAM BY ID
=============================================================================
Method: GET
Endpoint: /sales/teams/:id
Roles: dep_manager, unit_head, team_lead, senior, junior

Example Request:
GET /sales/teams/1

Success Response (200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Alpha Sales Team",
    "teamLeadId": 123,
    "salesUnitId": 1,
    "employeeCount": 5,
    "completedLeads": 15,
    "createdAt": "2024-01-15T10:30:00Z",
    "updatedAt": "2024-01-15T10:30:00Z",
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe",
      "email": "john@company.com",
      "phone": "+1 (555) 123-4567",
      "role": {
        "id": 3,
        "name": "team_lead"
      }
    },
    "salesUnit": {
      "id": 1,
      "name": "North Region",
      "email": "north@company.com",
      "phone": "+1 (555) 987-6543",
      "address": "123 Business St, City"
    },
    "members": [
      {
        "id": 124,
        "firstName": "Jane",
        "lastName": "Smith",
        "email": "jane@company.com",
        "phone": "+1 (555) 456-7890",
        "role": {
          "id": 4,
          "name": "senior"
        }
      }
    ],
    "leads": [
      {
        "id": 1,
        "name": "Lead Prospect",
        "email": "prospect@example.com",
        "phone": "+1 (555) 111-2222",
        "source": "PPC",
        "type": "warm",
        "status": "in_progress",
        "assignedTo": {
          "id": 124,
          "firstName": "Jane",
          "lastName": "Smith"
        }
      }
    ],
    "completedLeads": [
      {
        "id": 1,
        "lead": {
          "id": 2,
          "name": "Converted Lead",
          "email": "converted@example.com",
          "phone": "+1 (555) 333-4444"
        },
        "employee": {
          "id": 124,
          "firstName": "Jane",
          "lastName": "Smith"
        },
        "crackedAt": "2024-01-20T14:30:00Z"
      }
    ],
    "summary": {
      "membersCount": 4,
      "leadsCount": 25,
      "completedLeadsCount": 15,
      "conversionRate": 60.0
    }
  },
  "message": "Team details retrieved successfully"
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (403 - Forbidden):
{
  "statusCode": 403,
  "message": "You do not have access to this team",
  "error": "Forbidden"
}

=============================================================================
4. UPDATE SALES TEAM
=============================================================================
Method: PATCH
Endpoint: /sales/teams/:id
Roles: dep_manager, unit_head, team_lead

Request Body (All fields optional):
{
  "name": "Enhanced Alpha Team",
  "teamLeadId": 456,
  "salesUnitId": 2
}

Success Response (200):
{
  "success": true,
  "message": "Team updated successfully",
  "data": {
    "id": 1,
    "name": "Enhanced Alpha Team",
    "teamLeadId": 456,
    "salesUnitId": 2,
    "teamLead": {
      "id": 456,
      "firstName": "Mike",
      "lastName": "Johnson",
      "email": "mike@company.com"
    },
    "salesUnit": {
      "id": 2,
      "name": "South Region"
    }
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (409 - Conflict):
{
  "statusCode": 409,
  "message": "Team name \"Enhanced Alpha Team\" already exists in this sales unit",
  "error": "Conflict"
}

=============================================================================
5. DELETE SALES TEAM
=============================================================================
Method: DELETE
Endpoint: /sales/teams/:id
Roles: dep_manager

Example Request:
DELETE /sales/teams/1

Success Response (200):
{
  "success": true,
  "message": "Team \"Alpha Sales Team\" deleted successfully"
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (400 - Bad Request):
{
  "statusCode": 400,
  "message": "Cannot delete team. Team has assigned employees.",
  "error": "Bad Request"
}

=============================================================================
6. REPLACE TEAM LEAD
=============================================================================
Method: PUT
Endpoint: /sales/teams/:teamId/replace-lead
Roles: dep_manager, unit_head

Request Body:
{
  "newTeamLeadId": 456
}

Example Request:
PUT /sales/teams/1/replace-lead

Success Response (200):
{
  "success": true,
  "message": "Team lead replaced successfully. New team lead: Mike Johnson",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "previousTeamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "newTeamLead": {
      "id": 456,
      "firstName": "Mike",
      "lastName": "Johnson"
    },
    "employeeCount": 5
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (409 - Conflict):
{
  "statusCode": 409,
  "message": "Employee with ID 456 is already a team lead of team \"Beta Team\"",
  "error": "Conflict"
}

=============================================================================
7. ADD SINGLE EMPLOYEE TO TEAM
=============================================================================
Method: POST
Endpoint: /sales/teams/:teamId/add-employee
Roles: dep_manager, unit_head

Request Body:
{
  "employeeId": 124
}

Example Request:
POST /sales/teams/1/add-employee

Success Response (200):
{
  "success": true,
  "message": "Employee Jane Smith added to team successfully",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "employee": {
      "id": 124,
      "firstName": "Jane",
      "lastName": "Smith"
    },
    "employeeCount": 6
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (409 - Conflict):
{
  "statusCode": 409,
  "message": "Employee with ID 124 is already in team \"Beta Team\"",
  "error": "Conflict"
}

=============================================================================
8. ADD MEMBERS TO TEAM (BULK OPERATION)
=============================================================================
Method: POST
Endpoint: /sales/teams/:id/members
Roles: dep_manager, unit_head, team_lead

Request Body:
{
  "employeeIds": [124, 125, 126]
}

Example Request:
POST /sales/teams/1/members

Success Response (201):
{
  "success": true,
  "message": "Added 2 members to team. 1 failed.",
  "data": {
    "successful": [
      {
        "success": true,
        "message": "Employee Jane Smith added to team successfully"
      },
      {
        "success": true,
        "message": "Employee Bob Johnson added to team successfully"
      }
    ],
    "failed": [
      {
        "employeeId": 126,
        "error": "Employee is already in another team"
      }
    ],
    "totalProcessed": 3,
    "successCount": 2,
    "failureCount": 1
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

=============================================================================
9. REMOVE MEMBER FROM TEAM (Enhanced)
=============================================================================
Method: DELETE
Endpoint: /sales/teams/:id/members/:employeeId
Roles: dep_manager, unit_head, team_lead

Example Request:
DELETE /sales/teams/1/members/124

Success Response (200):
{
  "success": true,
  "message": "Employee Jane Smith removed from team successfully",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "employee": {
      "id": 124,
      "firstName": "Jane",
      "lastName": "Smith"
    },
    "employeeCount": 5
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Employee with ID 999 does not exist in this team",
  "error": "Not Found"
}

Error Response (400 - Bad Request):
{
  "statusCode": 400,
  "message": "Cannot remove employee. Employee has completed leads assigned.",
  "error": "Bad Request"
}

=============================================================================
10. REMOVE EMPLOYEE FROM TEAM (Legacy)
=============================================================================
Method: DELETE
Endpoint: /sales/teams/:teamId/remove-employee/:employeeId
Roles: dep_manager, unit_head

Example Request:
DELETE /sales/teams/1/remove-employee/124

Success Response (200):
{
  "success": true,
  "message": "Employee Jane Smith removed from team successfully",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "employee": {
      "id": 124,
      "firstName": "Jane",
      "lastName": "Smith"
    },
    "employeeCount": 5
  }
}

=============================================================================
11. UNASSIGN ALL EMPLOYEES FROM TEAM
=============================================================================
Method: POST
Endpoint: /sales/teams/:teamId/unassign-employees
Roles: dep_manager, unit_head

Example Request:
POST /sales/teams/1/unassign-employees

Success Response (200):
{
  "success": true,
  "message": "All employees unassigned from team successfully",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "employeeCount": 1
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

=============================================================================
12. GET AVAILABLE TEAM LEADS
=============================================================================
Method: GET
Endpoint: /sales/teams/available-leads
Roles: dep_manager, unit_head

Query Parameters (Optional):
- assigned: boolean (true/false)

Example Request:
GET /sales/teams/available-leads?assigned=false

Success Response (200):
{
  "success": true,
  "data": [
    {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe",
      "email": "john@company.com",
      "phone": "+1 (555) 123-4567",
      "role": {
        "id": 3,
        "name": "team_lead"
      },
      "department": {
        "id": 1,
        "name": "Sales"
      },
      "currentTeam": null,
      "isAssigned": false
    },
    {
      "id": 456,
      "firstName": "Mike",
      "lastName": "Johnson",
      "email": "mike@company.com",
      "phone": "+1 (555) 987-6543",
      "role": {
        "id": 3,
        "name": "team_lead"
      },
      "department": {
        "id": 1,
        "name": "Sales"
      },
      "currentTeam": {
        "id": 2,
        "name": "Beta Team",
        "salesUnit": {
          "id": 1,
          "name": "North Region"
        }
      },
      "isAssigned": true
    }
  ],
  "total": 5,
  "message": "Available team leads retrieved successfully"
}

=============================================================================
13. GET AVAILABLE EMPLOYEES
=============================================================================
Method: GET
Endpoint: /sales/teams/available-employees
Roles: dep_manager, unit_head, team_lead

Query Parameters (Optional):
- assigned: boolean (true/false)

Example Request:
GET /sales/teams/available-employees?assigned=false

Success Response (200):
{
  "success": true,
  "data": [
    {
      "id": 124,
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@company.com",
      "phone": "+1 (555) 456-7890",
      "role": {
        "id": 4,
        "name": "senior"
      },
      "department": {
        "id": 1,
        "name": "Sales"
      },
      "currentTeam": null,
      "isAssigned": false
    }
  ],
  "total": 15,
  "message": "Available employees retrieved successfully"
}

=============================================================================
14. GET TEAMS IN SALES UNIT
=============================================================================
Method: GET
Endpoint: /sales/teams/unit/:id
Roles: dep_manager, unit_head

Example Request:
GET /sales/teams/unit/1

Success Response (200):
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Alpha Sales Team",
      "teamLeadId": 123,
      "salesUnitId": 1,
      "employeeCount": 5,
      "completedLeads": 15,
      "teamLead": {
        "id": 123,
        "firstName": "John",
        "lastName": "Doe"
      }
    }
  ],
  "message": "Teams in sales unit retrieved successfully"
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Sales unit with ID 999 does not exist",
  "error": "Not Found"
}

=============================================================================
15. GET TEAM DETAILS (Legacy)
=============================================================================
Method: GET
Endpoint: /sales/teams/details/:teamId
Roles: dep_manager, unit_head, team_lead, senior, junior

Example Request:
GET /sales/teams/details/1

Success Response (200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Alpha Sales Team",
    "teamLeadId": 123,
    "salesUnitId": 1,
    "employeeCount": 5,
    "completedLeads": 15,
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "salesUnit": {
      "id": 1,
      "name": "North Region"
    }
  },
  "message": "Team details retrieved successfully"
}

=============================================================================
16. GET EMPLOYEE'S TEAM
=============================================================================
Method: GET
Endpoint: /sales/teams/employee/:employeeId
Roles: dep_manager, unit_head, team_lead, senior, junior

Example Request:
GET /sales/teams/employee/124

Success Response (200):
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Alpha Sales Team",
    "teamLeadId": 123,
    "salesUnitId": 1,
    "employeeCount": 5,
    "completedLeads": 15,
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "salesUnit": {
      "id": 1,
      "name": "North Region"
    }
  },
  "message": "Employee's team retrieved successfully"
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Employee with ID 999 is not in any team",
  "error": "Not Found"
}

=============================================================================
17. ASSIGN TEAM TO SALES UNIT
=============================================================================
Method: POST
Endpoint: /sales/teams/assign
Roles: dep_manager

Request Body:
{
  "teamId": 1,
  "salesUnitId": 2
}

Success Response (200):
{
  "success": true,
  "message": "Team \"Alpha Sales Team\" successfully assigned to sales unit \"South Region\"",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "salesUnit": {
      "id": 2,
      "name": "South Region"
    }
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

Error Response (409 - Conflict):
{
  "statusCode": 409,
  "message": "Team is already assigned to sales unit \"North Region\"",
  "error": "Conflict"
}

=============================================================================
18. UNASSIGN TEAM FROM SALES UNIT
=============================================================================
Method: DELETE
Endpoint: /sales/teams/unassign/:teamId
Roles: dep_manager

Example Request:
DELETE /sales/teams/unassign/1

Success Response (200):
{
  "success": true,
  "message": "Team \"Alpha Sales Team\" successfully unassigned from sales unit \"North Region\"",
  "data": {
    "teamId": 1,
    "teamName": "Alpha Sales Team",
    "teamLead": {
      "id": 123,
      "firstName": "John",
      "lastName": "Doe"
    },
    "previousUnit": {
      "id": 1,
      "name": "North Region"
    }
  }
}

Error Response (404):
{
  "statusCode": 404,
  "message": "Team with ID 999 does not exist",
  "error": "Not Found"
}

=============================================================================
19. GET AVAILABLE TEAMS
=============================================================================
Method: GET
Endpoint: /sales/teams/available
Roles: dep_manager

Example Request:
GET /sales/teams/available

Success Response (200):
{
  "success": true,
  "data": [
    {
      "id": 2,
      "name": "Beta Team",
      "teamLeadId": 456,
      "employeeCount": 5,
      "salesUnitId": null,
      "createdAt": "2024-01-20T14:30:00Z",
      "updatedAt": "2024-01-20T14:30:00Z",
      "teamLead": {
        "id": 456,
        "firstName": "Jane",
        "lastName": "Smith",
        "department": {
          "name": "Sales"
        }
      },
      "actualEmployeeCount": 5
    }
  ],
  "total": 1,
  "message": "Available sales teams retrieved successfully"
}

=============================================================================
COMMON ERROR RESPONSES
=============================================================================

401 Unauthorized:
{
  "statusCode": 401,
  "message": "Unauthorized",
  "error": "Unauthorized"
}

403 Forbidden:
{
  "statusCode": 403,
  "message": "Insufficient permissions",
  "error": "Forbidden"
}

404 Not Found:
{
  "statusCode": 404,
  "message": "Resource not found",
  "error": "Not Found"
}

409 Conflict:
{
  "statusCode": 409,
  "message": "Conflict occurred",
  "error": "Conflict"
}

400 Bad Request:
{
  "statusCode": 400,
  "message": "Validation failed",
  "error": "Bad Request"
}

500 Internal Server Error:
{
  "statusCode": 500,
  "message": "Internal server error",
  "error": "Internal Server Error"
}

=============================================================================
TESTING TIPS
=============================================================================

1. Authentication: Always include Bearer token in Authorization header
2. Department: Ensure user has Sales department access
3. Roles: Verify user has required role for endpoint
4. Validation: Check request body matches DTO requirements
5. Error Handling: Test error scenarios (404, 409, 403, etc.)
6. Pagination: Test with different page/limit values
7. Filtering: Test multiple query parameters together
8. Search: Test partial matches and case-insensitive search
9. Bulk Operations: Test with valid and invalid employee IDs
10. Role-Based Access: Test with different user roles

=============================================================================
EXAMPLE TEST SCENARIOS
=============================================================================

Scenario 1: Create Team and Add Members
POST /sales/teams
{
  "name": "New Team",
  "salesUnitId": 1,
  "teamLeadId": 123
}

POST /sales/teams/1/members
{
  "employeeIds": [124, 125]
}

GET /sales/teams/1

Scenario 2: Advanced Filtering
GET /sales/teams?hasLead=true&hasMembers=true&minMembers=2&page=1&limit=10&sortBy=name&sortOrder=asc

Scenario 3: Search and Pagination
GET /sales/teams?search=alpha&page=1&limit=5

Scenario 4: Replace Team Lead
PUT /sales/teams/1/replace-lead
{
  "newTeamLeadId": 456
}

Scenario 5: Update Team Information
PATCH /sales/teams/1
{
  "name": "Updated Team Name",
  "salesUnitId": 2
}

=============================================================================
